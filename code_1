#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>

#define BMP280_ADDRESS 0x76  // Adresse I2C du capteur
#define REG_CALIB 0x88       // Registres de calibration
#define REG_PRESS_MSB 0xF7   // Registre de pression brute
#define REG_TEMP_MSB 0xFA    // Registre de temp√©rature brute
#define REG_CONTROL 0xF4     // Registre de configuration

// Structures pour les coefficients de calibration
struct BMP280_Calib {
    uint16_t dig_T1;
    int16_t dig_T2, dig_T3;
    uint16_t dig_P1;
    int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
} calib;

int32_t t_fine; // Temp√©rature fine pour compensation

// Fonction pour lire un mot de 16 bits
uint16_t read16(int file, uint8_t reg) {
    uint8_t data[2];
    if (write(file, &reg, 1) != 1 || read(file, data, 2) != 2) {
        std::cerr << "‚ùå Erreur lors de la lecture du registre 0x" << std::hex << (int)reg << std::dec << "\n";
        return 0;
    }
    return (data[0] << 8) | data[1];
}

// Fonction pour lire 3 octets (MSB, LSB, XLSB)
int32_t readRawData(int file, uint8_t reg) {
    uint8_t data[3];
    if (write(file, &reg, 1) != 1 || read(file, data, 3) != 3) {
        std::cerr << "‚ùå Erreur lors de la lecture des donn√©es brutes\n";
        return 0;
    }
    return ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((data[2] >> 4) & 0x0F);
}

// Fonction pour lire les coefficients de calibration
bool readCalibration(int file) {
    calib.dig_T1 = read16(file, REG_CALIB);
    calib.dig_T2 = (int16_t)read16(file, REG_CALIB + 2);  // Les coefficients sont stock√©s √† partir de REG_CALIB + 2
    calib.dig_T3 = (int16_t)read16(file, REG_CALIB + 4);
    calib.dig_P1 = read16(file, REG_CALIB + 6);
    calib.dig_P2 = (int16_t)read16(file, REG_CALIB + 8);
    calib.dig_P3 = (int16_t)read16(file, REG_CALIB + 10);
    calib.dig_P4 = (int16_t)read16(file, REG_CALIB + 12);
    calib.dig_P5 = (int16_t)read16(file, REG_CALIB + 14);
    calib.dig_P6 = (int16_t)read16(file, REG_CALIB + 16);
    calib.dig_P7 = (int16_t)read16(file, REG_CALIB + 18);
    calib.dig_P8 = (int16_t)read16(file, REG_CALIB + 20);
    calib.dig_P9 = (int16_t)read16(file, REG_CALIB + 22);
    return true;
}

// Fonction de compensation de la temp√©rature
int32_t bmp280_compensate_T_int32(int32_t adc_T) {
    int32_t var1, var2;
    var1 = ((((adc_T >> 3) - ((int32_t)calib.dig_T1 << 1))) * ((int32_t)calib.dig_T2)) >> 11;
    var2 = (((((adc_T >> 4) - ((int32_t)calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)calib.dig_T1))) >> 12) *
            ((int32_t)calib.dig_T3)) >> 14;
    t_fine = var1 + var2;
    return (t_fine * 5 + 128) >> 8;  // Temp√©rature en ¬∞C (r√©solution de 0.01¬∞C)
}

// Fonction de compensation de la pression
uint32_t bmp280_compensate_P_int64(int32_t adc_P) {
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)calib.dig_P6;
    var2 = var2 + ((var1 * (int64_t)calib.dig_P5) << 17);
    var2 = var2 + (((int64_t)calib.dig_P4) << 35);
    var1 = ((var1 * var1 * (int64_t)calib.dig_P3) >> 8) + ((var1 * (int64_t)calib.dig_P2) << 12);
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)calib.dig_P1) >> 33;
    if (var1 == 0) {
        return 0;  // Protection contre la division par z√©ro
    }
    p = 1048576 - adc_P;
    p = (((p << 31) - var2) * 3125) / var1;
    var1 = (((int64_t)calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    var2 = (((int64_t)calib.dig_P8) * p) >> 19;
    p = ((p + var1 + var2) >> 8) + (((int64_t)calib.dig_P7) << 4);
    return (uint32_t)(p >> 8);  // Pression en Pa (Q24.8 format)
}

int main() {
    const char *device = "/dev/i2c-1";
    int file = open(device, O_RDWR);
    if (file < 0) {
        std::cerr << "‚ùå Erreur : Impossible d'ouvrir le bus I2C\n";
        return 1;
    }

    if (ioctl(file, I2C_SLAVE, BMP280_ADDRESS) < 0) {
        std::cerr << "‚ùå Erreur : Impossible de communiquer avec le BMP280\n";
        close(file);
        return 1;
    }

    if (!readCalibration(file)) {
        std::cerr << "‚ùå Erreur : Impossible de lire la calibration\n";
        close(file);
        return 1;
    }

    // Configuration du capteur pour temp√©rature et pression
    char config[2] = {REG_CONTROL, 0x27};
    if (write(file, config, 2) != 2) {
        std::cerr << "‚ùå Erreur : √âchec de la configuration\n";
        close(file);
        return 1;
    }

    for (int i = 0; i < 15; i++) {
        usleep(10000);  // Attente avant de lire les donn√©es

        // Lire les donn√©es brutes de temp√©rature
        int32_t rawTemp = readRawData(file, REG_TEMP_MSB);
        int32_t temp_C = bmp280_compensate_T_int32(rawTemp);

        // Lire les donn√©es brutes de pression
        int32_t rawPressure = readRawData(file, REG_PRESS_MSB);
        uint32_t pressure_Pa = bmp280_compensate_P_int64(rawPressure);
        double pressure_hPa = pressure_Pa / 256.0;  // Convertir en hPa

        std::cout << "üìä Relev√© " << (i + 1) << " : Temp = " << temp_C / 100.0 << " ¬∞C, Pression = " << pressure_hPa << " hPa\n";
        usleep(2000000);  // Attente de 2 secondes entre les mesures
    }

    close(file);
    return 0;
}
