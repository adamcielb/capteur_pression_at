#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <cmath>
#include <cstdint>

#define BMP280_ADDRESS 0x76
#define REG_CONTROL 0xF4
#define REG_PRESS_MSB 0xF7
#define REG_CALIB 0x88  // Adresse de d√©part des coefficients de calibration

// Structure pour stocker les coefficients de calibration
struct BMP280_CalibData {
    uint16_t dig_T1;
    int16_t dig_T2, dig_T3;
    uint16_t dig_P1;
    int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
};

// Fonction pour lire un mot (16 bits) depuis le BMP280
int16_t read16(int file, uint8_t reg) {
    uint8_t data[2];
    write(file, &reg, 1);
    read(file, data, 2);
    return (data[1] << 8) | data[0];
}

// Fonction pour lire les coefficients de calibration
void readCalibrationData(int file, BMP280_CalibData &calib) {
    calib.dig_T1 = read16(file, 0x88);
    calib.dig_T2 = read16(file, 0x8A);
    calib.dig_T3 = read16(file, 0x8C);
    calib.dig_P1 = read16(file, 0x8E);
    calib.dig_P2 = read16(file, 0x90);
    calib.dig_P3 = read16(file, 0x92);
    calib.dig_P4 = read16(file, 0x94);
    calib.dig_P5 = read16(file, 0x96);
    calib.dig_P6 = read16(file, 0x98);
    calib.dig_P7 = read16(file, 0x9A);
    calib.dig_P8 = read16(file, 0x9C);
    calib.dig_P9 = read16(file, 0x9E);
}

// Fonction de compensation de la pression selon la datasheet
double compensatePressure(int32_t adc_P, int32_t t_fine, BMP280_CalibData &calib) {
    double var1, var2, p;
    var1 = ((double)t_fine / 2.0) - 64000.0;
    var2 = var1 * var1 * ((double)calib.dig_P6) / 32768.0;
    var2 = var2 + var1 * ((double)calib.dig_P5) * 2.0;
    var2 = (var2 / 4.0) + (((double)calib.dig_P4) * 65536.0);
    var1 = (((double)calib.dig_P3) * var1 * var1 / 524288.0 + ((double)calib.dig_P2) * var1) / 524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double)calib.dig_P1);

    if (var1 == 0.0) return 0; // √©viter la division par z√©ro

    p = 1048576.0 - (double)adc_P;
    p = (p - (var2 / 4096.0)) * 6250.0 / var1;
    var1 = ((double)calib.dig_P9) * p * p / 2147483648.0;
    var2 = p * ((double)calib.dig_P8) / 32768.0;
    p = p + (var1 + var2 + ((double)calib.dig_P7)) / 16.0;

    return p / 100.0; // Conversion en hPa
}

int main() {
    const char *device = "/dev/i2c-1";
    int file = open(device, O_RDWR);
    if (file < 0) {
        std::cerr << "‚ùå Erreur : Impossible d'ouvrir le bus I2C\n";
        return 1;
    }

    if (ioctl(file, I2C_SLAVE, BMP280_ADDRESS) < 0) {
        std::cerr << "‚ùå Erreur : Impossible de communiquer avec le BMP280\n";
        close(file);
        return 1;
    }

    // Lire les coefficients de calibration
    BMP280_CalibData calib;
    readCalibrationData(file, calib);

    // Configurer le BMP280 : mode normal, oversampling x4
    char config[2] = {REG_CONTROL, 0x57};  
    if (write(file, config, 2) != 2) {
        std::cerr << "‚ùå Erreur : √âchec de la configuration du BMP280\n";
        close(file);
        return 1;
    }

    // Variable pour le nombre de relev√©s
    int nombreReleves = 15;

    for (int i = 0; i < nombreReleves; i++) {
        usleep(10000);  // Pause pour laisser le capteur effectuer une mesure

        // Lire les donn√©es de pression
        char reg = REG_PRESS_MSB;
        char data[3];

        if (write(file, &reg, 1) != 1 || read(file, data, 3) != 3) {
            std::cerr << "‚ùå Erreur : Lecture des donn√©es impossible\n";
            close(file);
            return 1;
        }

        // Extraire la valeur brute de pression (20 bits)
        int32_t rawPressure = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((data[2] >> 4) & 0x0F);

        // Simulation de t_fine (normalement issu de la compensation de temp√©rature)
        int32_t t_fine = 10000; // Remplacez par la vraie valeur de compensation si disponible

        // Appliquer la compensation
        double pressure_hPa = compensatePressure(rawPressure, t_fine, calib);

        // Afficher le r√©sultat
        std::cout << "üìä Relev√© " << (i + 1) << " : Pression = " << pressure_hPa << " hPa" << std::endl;

        sleep(2);  // Pause avant la prochaine mesure
    }

    close(file);
    return 0;
}
